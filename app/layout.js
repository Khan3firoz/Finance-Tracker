'use client'
import React, { useEffect, useState } from "react";
import { Geist, Geist_Mono } from "next/font/google";
import "./globals.css";
import { AppProvider } from "./Context/AppContext";
import { FilterProvider } from "./Context/FilterContext";
import Header from "./components/Navbar/Header";
import { usePathname } from "next/navigation";
import SideNav from "./components/Navbar/SideNav";
import { ExpenceProvider } from "./Context/ExpenceContext";
import { ToastProvider } from "./Context/TosterProvider";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

const geistMono = Geist_Mono({
  variable: "--font-geist-mono",
  subsets: ["latin"],
});

// export const metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({ children }) {
  const pathname = usePathname();
  const authRoutes = ["/login", "/signup"];
  const isAuthPage = authRoutes.includes(pathname);
  const [theme, setTheme] = useState('dark');

  const toggleTheme = () => {
    const newTheme = theme === 'light' ? 'dark' : 'light';
    setTheme(newTheme);
    localStorage.setItem('theme', newTheme);
    document.documentElement.classList.toggle('dark', newTheme === 'dark');
  };

  useEffect(() => {
    const savedTheme = localStorage.getItem('theme') || 'light';
    setTheme(savedTheme);
    document.documentElement.classList.toggle('dark', savedTheme === 'dark');
  }, []);

  return (
    <html lang="en" className="h-full">
      <body className={`${geistSans.variable} ${geistMono.variable} antialiased dark:bg-gray-700 min-h-screen overflow-x-hidden`}>
        <AppProvider>
          <ToastProvider>
            <FilterProvider>
              <ExpenceProvider>
                {!isAuthPage && <SideNav />}
                {!isAuthPage ? (
                  <div className="ml-0 sm:ml-2 h-auto p-1 sm:p-2 bg-gray-100 dark:bg-gray-700 rounded-lg shadow min-h-screen">
                    <Header theme={theme} toggleTheme={toggleTheme} />
                    <div className="flex w-full">
                      <main className="p-1 sm:p-2 w-full mx-0 sm:mx-1 lg:mx-4 overflow-x-auto">{children}</main>
                    </div>
                  </div>
                ) : (
                    <main className="min-h-screen w-full">{children}</main>
                )}
              </ExpenceProvider>
            </FilterProvider>
          </ToastProvider>
        </AppProvider>
      </body>
    </html>
  );
}
